// Code generated by mlflow/go/cmd/generate/main.go. DO NOT EDIT.

package routes

import (
	"github.com/gofiber/fiber/v2"
	"github.com/mlflow/mlflow-go-backend/pkg/server/parser"
	"github.com/mlflow/mlflow-go-backend/pkg/contract/service"
	"github.com/mlflow/mlflow-go-backend/pkg/utils"
	"github.com/mlflow/mlflow-go-backend/pkg/protos"
)

func RegisterModelRegistryServiceRoutes(service service.ModelRegistryService, parser *parser.HTTPRequestParser, app *fiber.App) {
	app.Post("/mlflow/registered-models/create", func(ctx *fiber.Ctx) error {
		input := &protos.CreateRegisteredModel{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.CreateRegisteredModel(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/registered-models/rename", func(ctx *fiber.Ctx) error {
		input := &protos.RenameRegisteredModel{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.RenameRegisteredModel(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Patch("/mlflow/registered-models/update", func(ctx *fiber.Ctx) error {
		input := &protos.UpdateRegisteredModel{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.UpdateRegisteredModel(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Delete("/mlflow/registered-models/delete", func(ctx *fiber.Ctx) error {
		input := &protos.DeleteRegisteredModel{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.DeleteRegisteredModel(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Get("/mlflow/registered-models/get", func(ctx *fiber.Ctx) error {
		input := &protos.GetRegisteredModel{}
		if err := parser.ParseQuery(ctx, input); err != nil {
			return err
		}
		output, err := service.GetRegisteredModel(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/registered-models/get-latest-versions", func(ctx *fiber.Ctx) error {
		input := &protos.GetLatestVersions{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.GetLatestVersions(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Get("/mlflow/registered-models/get-latest-versions", func(ctx *fiber.Ctx) error {
		input := &protos.GetLatestVersions{}
		if err := parser.ParseQuery(ctx, input); err != nil {
			return err
		}
		output, err := service.GetLatestVersions(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Patch("/mlflow/model-versions/update", func(ctx *fiber.Ctx) error {
		input := &protos.UpdateModelVersion{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.UpdateModelVersion(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/model-versions/transition-stage", func(ctx *fiber.Ctx) error {
		input := &protos.TransitionModelVersionStage{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.TransitionModelVersionStage(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Delete("/mlflow/model-versions/delete", func(ctx *fiber.Ctx) error {
		input := &protos.DeleteModelVersion{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.DeleteModelVersion(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Get("/mlflow/model-versions/get", func(ctx *fiber.Ctx) error {
		input := &protos.GetModelVersion{}
		if err := parser.ParseQuery(ctx, input); err != nil {
			return err
		}
		output, err := service.GetModelVersion(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/registered-models/set-tag", func(ctx *fiber.Ctx) error {
		input := &protos.SetRegisteredModelTag{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.SetRegisteredModelTag(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Delete("/mlflow/registered-models/delete-tag", func(ctx *fiber.Ctx) error {
		input := &protos.DeleteRegisteredModelTag{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.DeleteRegisteredModelTag(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Post("/mlflow/registered-models/alias", func(ctx *fiber.Ctx) error {
		input := &protos.SetRegisteredModelAlias{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.SetRegisteredModelAlias(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
	app.Delete("/mlflow/registered-models/alias", func(ctx *fiber.Ctx) error {
		input := &protos.DeleteRegisteredModelAlias{}
		if err := parser.ParseBody(ctx, input); err != nil {
			return err
		}
		output, err := service.DeleteRegisteredModelAlias(utils.NewContextWithLoggerFromFiberContext(ctx), input)
		if err != nil {
			return err
		}
		return ctx.JSON(output)
	})
}
